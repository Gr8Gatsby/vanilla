class DataCell extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n            <style>\n                .value {\n                    margin-left: 5px;\n                    padding: 2px;\n                    border:none;\n                    flex: 5;\n                }\n\n                .edit {\n                    margin-left: 5px;\n                    padding: 2px;\n                    border: none;\n                    color: white;\n                    border-bottom: 2px #FF3F91 solid;\n                    flex: 5;\n                    background-color: hotpink;\n                }\n            </style>\n            <input class="value" readonly/>\n        '}saveChanges(e,t){e.setAttribute("class","value"),e.readOnly=!0;const a={label:this.label,value:t},l=new CustomEvent("cellUpdate",{bubbles:!0,detail:a});this.dispatchEvent(l)}handleDoubleClick(e){this.editable&&(e.target.readOnly=!1,e.target.setAttribute("class","edit"))}handleBlur(e){!1===e.target.readOnly&&this.saveChanges(e.target,e.target.value.trim())}handleKeyDownInput(e){"Enter"===e.key&&!1===e.target.readOnly&&this.saveChanges(e.target,e.target.value.trim())}connectedCallback(){let e=this.shadowRoot.getRootNode().querySelector("input"),t=this.getAttributeNames();this.editable=this.getAttribute("editable"),"false"===this.editable?this.editable=!1:this.editable=!0,this.label=t[0],this.value=this.getAttribute(this.label),"undefined"!=this.value&&(e.value=this.value),this.editable&&(this.handleDoubleClickCallback=this.handleDoubleClick.bind(this),this.handleBlurCallback=this.handleBlur.bind(this),this.handleKeyDownInputCallback=this.handleKeyDownInput.bind(this),e.addEventListener("dblclick",this.handleDoubleClickCallback),e.addEventListener("blur",this.handleBlurCallback),e.addEventListener("keydown",this.handleKeyDownInputCallback))}disconnectedCallback(){if(this.editable){let e=this.shadowRoot.getRootNode().querySelector("input");e.removeEventListener("dblclick",this.handleDoubleClickCallback),e.removeEventListener("blur",this.handleBlurCallback),e.removeEventListener("keydown",this.handleKeyDownInputCallback)}}}customElements.define("data-cell",DataCell);class DataRow extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML="\n            <style>\n                .nameSpan{\n                    font-weight: bolder;\n                }\n                .fmid{\n                    margin-right: 5px;\n                    color: gray;\n                }\n            </style>\n            <div>\n            </div>\n        "}handleCellUpdate(e){e.preventDefault();new SObjectModel.Market}connectedCallback(){let e=this.shadowRoot.getRootNode(),t=(this.getAttributeNames(),e.querySelector("div"));this.handleCellUpdateCallback=this.handleCellUpdate.bind(this),t.addEventListener("cellUpdate",this.handleCellUpdateCallback);let a=JSON.parse(this.getAttribute("cols")),l=JSON.parse(this.getAttribute("values"));null!=a&&[...a].forEach(e=>{let a=document.createElement("data-cell");a.setAttribute("value",l[e.name]),a.setAttribute("editable",e.editable),a.setAttribute("display",e.display),t.appendChild(a)})}disconnectedCallback(){this.shadowRoot.getRootNode().querySelector("div").removeEventListener("cellUpdate",this.handleCellUpdateCallback)}}customElements.define("data-row",DataRow);class DataTable extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n            <style>\n                .dataTable{\n                    border: 1px solid red;\n                    padding: 5px;\n                    text-align: center;\n                }\n            </style>\n            <slot></slot>\n            <slot name="table">\n                <div class="dataTable"></div>\n            </slot>\n        '}connectedCallback(){const e=this.shadowRoot.getRootNode().querySelector("slot");e.addEventListener("slotchange",function(t){const a=[];e.assignedElements().forEach(e=>{let t=e.attributes["data-editable"].value,l=e.attributes["display-name"].value,n=e.attributes.name.value;a.push({name:n,display:l,editable:t})}),this.drawHeader(a)}.bind(this))}drawHeader(e){let t=this.shadowRoot.getRootNode().querySelector("div.dataTable");var a=document.createElement("data-row");e.forEach(e=>{let t=document.createElement("data-cell");t.setAttribute("value",e.display),t.setAttribute("editable",!1),t.setAttribute("display",e.display),a.shadowRoot.appendChild(t)}),a.setAttribute("recordId",null),t.appendChild(a),this.drawRows(e)}drawRows(e){let t=this.getAttribute("object-name"),a=Number(this.getAttribute("page-size")),l=this.shadowRoot.getRootNode().querySelector("div.dataTable"),n=void 0;try{n=new SObjectModel[t]}catch(e){}void 0!=n?n.retrieve({limit:a},function(t,a){if(t)throw new Error(t.message);return a.forEach(function(t){var a=document.createElement("data-row");a.setAttribute("recordId",t.get("Id")),a.setAttribute("cols",JSON.stringify(e)),a.setAttribute("values",JSON.stringify(t._props)),l.appendChild(a)}),[]}):testRecords.forEach(function(t){var a=document.createElement("data-row");a.setAttribute("recordId",t._props.Id),a.setAttribute("cols",JSON.stringify(e)),a.setAttribute("values",JSON.stringify(t._props)),l.appendChild(a)})}}customElements.define("data-table",DataTable);